import java.util.*;
public class implementsHashMap{
    static class hashmap<K,V>
    {
        private class node{
            K key;
            V value;

            public node(K key,V value)
            {
                this.key=key;
                this.value=value;
            }
        }
        public int n;//linkedlist size
        public int N;//bucket size
        public LinkedList<node>buckets[];
        @SuppressWarnings("unchecked")
        public hashmap(){
            this.N=4;
            this.buckets=new LinkedList[4];
            for(int i=0;i<4;i++)
            {
                this.buckets[i]=new LinkedList<>();
            }
        }
        private int hasfunction(K key)
        {
            int hc=key.hashCode();
            return Math.abs(hc)%N;
        }
        private int searchinLL(K key,int bi)
        {
            LinkedList<node>ll=new LinkedList<>();
            int di=0;
            for(int i=0;i<ll.size();i++)
            {
                node Node=ll.get(i);
                if(Node.key==key)
                {
                    return di;

                }
                di++;
            }
            return -1;
        }
        private void rehas()
            {
                LinkedList<node>oldbuck[]=buckets;
                buckets=new LinkedList[N*2];
                N=N*2;
                for(int i=0;i<buckets.length;i++)
                {
                    buckets[i]=new LinkedList<>();
                }
                //add:in oldnuck
                for(int i=0;i<oldbuck.length;i++)
                {
                    LinkedList<node>ll=oldbuck[i];
                    node Node=ll.remove();
                    putkey(Node.key,Node.value);
                }

            }
        
        public void putkey(K key,V value)
        {
            int bi=hasfunction(key);
            int di=searchinLL(key,bi);

            if(di!=-1)
            {
                node Node=buckets[bi].get(di);
                Node.value=value;
            }
            else
            {
                 buckets[bi].add(new node(key, value));
                 n++;
            }
            double lambda=(double)n/N;
            if(lambda>2.0)
            {
                rehas();
            }
        }
        public  boolean containsKey(K key)
        {
            int bi=hasfunction(key);
            int di=searchinLL(key,bi);

            if(di!=-1)
            {
                return true;
            }
            else{
                return false;
            }
        }
        public  V get(K key)
        {
            int bi=hasfunction(key);
            int di=searchinLL(key,bi);

            if(di!=-1)
            {
                node Node=buckets[bi].get(di);
                return Node.value;
            }
            else{
                return null;
            }
        }
        public V remove(K key)
        {
            int bi=hasfunction(key);
            int di=searchinLL(key,bi);
            if(di!=-1)
            {
                node Node=buckets[bi].remove(di);
                n--;
                return Node.value;
            }
            else{
                return null;
            }
        }
        public ArrayList<K>keyset(K key)
        {
            ArrayList<K>keys=new ArrayList<>();

            for(int i=0;i<buckets.length;i++ )
            {
                LinkedList<node>ll=buckets[i];
                for (node node : ll) {
                    keys.add(node.key);
                    
                }
            }
            return keys;
        }
        public boolean isEmpty()
        {
            return n==0;
        }

    }
    public static void main(String[] args) {
        HashMap<String,Integer>map=new HashMap<>();
        map.put("india",200);
        map.put("china",499);
        map.put("bangladesh",500);
        map.put("australia",300);

        ArrayList<String>keys=new ArrayList<>();
        for (String key: keys) {
            System.out.println(key);
            
        }
            
    }
        
}
  

